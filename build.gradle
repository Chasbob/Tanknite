allprojects {
    group 'aticatac'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    sourceCompatibility = 1.11
    targetCompatibility = 1.11
    repositories {
        mavenCentral()
        jcenter()
    }
    ext {
        appName = "my-gdx-com.mygdx.game"
        gdxVersion = '1.9.9'
        roboVMVersion = '2.3.5'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
        implementation group: 'log4j', name: 'log4j', version: '1.2.17'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile 'org.apache.commons:commons-collections4:4.1'
        compile 'org.jetbrains:annotations:16.0.1'
        implementation 'com.google.guava:guava:27.1-jre'
    }
    test {
        useJUnitPlatform()
    }
    test.useTestNG()
}
task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
//        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

project(':common') {
    dependencies {
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
        implementation 'org.reflections:reflections:0.9.11'
        implementation 'com.google.code.gson:gson:2.8.5'
    }
    sourceSets {
        test {
            java.srcDir file('src/game/java/')
            resources.srcDir 'src/game/resources'
        }

    }
}


project(':client') {
    apply plugin: 'application'

    application {
        mainClassName = "com.aticatac.client.networking.Main"
    }

    dependencies {
        implementation 'org.reflections:reflections:0.9.11'
        implementation 'com.google.code.gson:gson:2.8.5'
        compile project(':common')
        implementation 'com.google.guava:guava:27.1-jre'
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
    task play(type: JavaExec) {
        main = "com.aticatac.client.desktop.DesktopLauncher"
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs '--illegal-access=deny'
    }
}
project(':database') {
    apply plugin: 'application'
    application {
        mainClassName = "com.aticatac.database.Main"
    }
    dependencies {
        compile 'org.mybatis:mybatis:3.4.6'
        implementation 'org.postgresql:postgresql:42.2.5.jre7'
        compile project(':common')

    }
    task database(type: JavaExec) {
        main = "com.aticatac.database.Main"
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs '--illegal-access=deny'
    }
    task dbclient(type: JavaExec) {
        main = "com.aticatac.database.Client"
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs '--illegal-access=deny'
    }
}



