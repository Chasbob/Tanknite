allprojects {
//    version "1.0-SNAPSHOT"
    group 'aticatac'
}
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.14"
    }
}

apply plugin: 'docker-compose'


subprojects {

    apply plugin: 'java'
    sourceCompatibility = 1.11
    targetCompatibility = 1.11
    repositories {
        mavenCentral()
    }
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        implementation group: 'log4j', name: 'log4j', version: '1.2.17'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
        compile 'org.jetbrains:annotations:16.0.1'
    }
    ext {
        appName = "my-gdx-com.mygdx.game"
        gdxVersion = '1.9.9'
        roboVMVersion = '2.3.5'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    startedServices = []
    // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
//    scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
    forceRecreate = true // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
    noRecreate = false // pass '--no-recreate' when calling 'docker-compose up' when set to 'true`
    buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
    buildBeforePull = true // performs 'docker-compose build' before calling the 'pull' command; default is true
    ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
    ignorePushFailure = false // when set to true, pass '--ignore-push-failure' to 'docker-compose push'
    pushServices = []
    // which services should be pushed, if not defined then upon `composePush` task all defined services in compose file will be pushed (default behaviour)
    buildAdditionalArgs = ['--force-rm']
    pullAdditionalArgs = ['--ignore-pull-failures']
    upAdditionalArgs = ['--no-deps']
    downAdditionalArgs = ['--some-switch']

    waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
    tcpPortsToIgnoreWhenWaiting = [1234]
    // list of TCP ports what will be ignored when waiting for exposed TCP ports opening; default: empty list
    captureContainersOutput = false
    // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
//    captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file
//    captureContainersOutputToFiles = '/path/to/directory' // sends output of all services to a dedicated log file in the directory specified, e.g. 'web.log' for service named 'log'
    composeLogToFile = project.file('build/my-logs.txt')
    // redirect output of composeUp and composeDown tasks to this file; default is null (ouput is not redirected)
    containerLogToDir = project.file('build/logs')
    // directory where composeLogs task stores output of the containers; default: build/containers-logs

    stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
    removeContainers = true
    removeImages = "None" // Other accepted values are: "All" and "Local"
    removeVolumes = true
    removeOrphans = true // removes containers for services not defined in the Compose file

    projectName = 'networking'
    // allow to set custom docker-compose project name (defaults to a stable name derived from absolute path of the project), set to null to Docker Compose default (directory name)
//    executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
//    dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
//    dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
    dockerComposeStopTimeout = java.time.Duration.ofSeconds(20)
    // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started
    environment.put 'version', "$version"
    // Pass environment variable to 'docker-compose' for substitution in compose file
}


